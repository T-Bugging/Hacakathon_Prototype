# -*- coding: utf-8 -*-
"""Verify_with_headline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M2wvZrNhdcsMJ6KRLHtPCFuOU_D3JgAn
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install feedparser

# -*- coding: utf-8 -*-
"""GenAINews

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12aYRrmDsKD6uDi6C7Ww_tftuqwQ9W1Fk
"""

import feedparser
from urllib.parse import quote_plus
from datetime import datetime, timedelta
import google.generativeai as genai

# ðŸ”‘ API Key
GEMINI_API_KEY = "AIzaSyA0-1QSjRCnLcROFmf3aQ1rWOb3f2DKAhg"
genai.configure(api_key=GEMINI_API_KEY)

MAX_DAYS_LOOKBACK = 30  # Search in last 30 days

def get_recent_news(query, days=MAX_DAYS_LOOKBACK):
    """Fetch recent news from Google News RSS."""
    base_url = "https://news.google.com/rss/search?q="
    url = f"{base_url}{quote_plus(query)}&hl=en-IN&gl=IN&ceid=IN:en"

    feed = feedparser.parse(url)
    recent_news = []
    cutoff = datetime.now() - timedelta(days=days)

    for entry in feed.entries:
        if hasattr(entry, 'published_parsed'):
            pub_date = datetime(*entry.published_parsed[:6])
            if pub_date >= cutoff:
                recent_news.append({
                    "title": entry.title,
                    "link": entry.link,
                    "published": pub_date
                })
    return recent_news


def fact_check_news(headline, description=""):
    """Fact-check news claim using headline + description with Gemini."""

    # Combine headline + description for search and reasoning
    full_claim = f"{headline}. {description}" if description else headline

    # Step 1: Get recent related news
    evidence_news = get_recent_news(full_claim)
    evidence_titles = [news['title'] for news in evidence_news]

    if not evidence_titles:
        return {
            "prediction": "UNKNOWN",
            "confidence": 0,
            "reason": "No related recent news found"
        }

    # Step 2: Exact match check â€” if headline found, mark as REAL
    for title in evidence_titles:
        if headline.lower() in title.lower():
            return {
                "prediction": "REAL",
                "confidence": 100,
                "reason": f"Exact match found in news: '{title}'"
            }

    # Prepare evidence text
    evidence_text = "\n".join(f"- {title}" for title in evidence_titles)

    # Step 3: Prepare the input for Gemini
    model_input = f"""
    Headline: {headline}
    Description: {description}

    Evidence from reputable sources:
    {evidence_text}

    Based on this evidence, decide if the news is REAL or FAKE.
    Respond in JSON format:
    {{
        "prediction": "REAL or FAKE",
        "confidence": "0-100",
        "reason": "Short explanation"
    }}
    """

    # Step 4: Call Gemini
    model = genai.GenerativeModel("gemini-2.0-flash")
    response = model.generate_content(model_input)

    return response.text


if __name__ == "__main__":
    # Take headline + description input
    headline = input("\nEnter the news headline: ").strip()
    description = input("Enter the news description (optional): ").strip()

    result = fact_check_news(headline, description)
    print("\nReal as fact:")
    print(result)

