# -*- coding: utf-8 -*-
"""Combined_with_link&headline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yrkXXzWy_1lVwihnd06PWGTvku_xOs0s
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install feedparser

# -*- coding: utf-8 -*-
"""
Unified News Fact Checker (CLI version)
- Supports checking by headline + description
- Supports checking by article URL (extracts headline automatically)
- Uses Google News RSS + Gemini for fact-checking
"""

import requests
from bs4 import BeautifulSoup
import feedparser
from urllib.parse import quote_plus
from datetime import datetime, timedelta
import google.generativeai as genai

# üîë Gemini API Key
GEMINI_API_KEY = "AIzaSyA0-1QSjRCnLcROFmf3aQ1rWOb3f2DKAhg"
genai.configure(api_key=GEMINI_API_KEY)

MAX_DAYS_LOOKBACK = 30  # Search window for related news


# -------------------------------
# Utility: Fetch related news
# -------------------------------
def get_recent_news(query, days=MAX_DAYS_LOOKBACK):
    """Fetch recent news from Google News RSS."""
    base_url = "https://news.google.com/rss/search?q="
    url = f"{base_url}{quote_plus(query)}&hl=en-IN&gl=IN&ceid=IN:en"

    feed = feedparser.parse(url)
    recent_news = []
    cutoff = datetime.now() - timedelta(days=days)

    for entry in feed.entries:
        if hasattr(entry, 'published_parsed'):
            pub_date = datetime(*entry.published_parsed[:6])
            if pub_date >= cutoff:
                recent_news.append({
                    "title": entry.title,
                    "link": entry.link,
                    "published": pub_date
                })
    return recent_news


# -------------------------------
# Core: Fact-check news
# -------------------------------
def fact_check_news(headline, description=""):
    """Fact-check a news claim using headline + description + Gemini."""
    full_claim = f"{headline}. {description}" if description else headline

    # Step 1: Get recent related news
    evidence_news = get_recent_news(full_claim)
    evidence_titles = [news['title'] for news in evidence_news]

    if not evidence_titles:
        return {
            "prediction": "UNKNOWN",
            "confidence": 0,
            "reason": "No related recent news found"
        }

    # Step 2: Exact match check
    for title in evidence_titles:
        if headline.lower() in title.lower():
            return {
                "prediction": "REAL",
                "confidence": 100,
                "reason": f"Exact match found in news: '{title}'"
            }

    # Step 3: Prepare evidence and call Gemini
    evidence_text = "\n".join(f"- {title}" for title in evidence_titles)
    model_input = f"""
    Headline: {headline}
    Description: {description}

    Evidence from reputable sources:
    {evidence_text}

    Based on this evidence, decide if the news is REAL or FAKE.
    Respond in JSON format:
    {{
        "prediction": "REAL or FAKE",
        "confidence": "0-100",
        "reason": "Short explanation"
    }}
    """

    model = genai.GenerativeModel("gemini-2.0-flash")
    response = model.generate_content(model_input)
    return response.text


# -------------------------------
# Helper: Extract headline from URL
# -------------------------------
def extract_headline_from_url(url):
    """Extract headline/title from a given webpage URL."""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error fetching URL: {e}")
        return None

    soup = BeautifulSoup(response.text, "html.parser")

    if soup.find("meta", property="og:title"):
        return soup.find("meta", property="og:title")["content"].strip()
    elif soup.find("title"):
        return soup.find("title").get_text().strip()
    elif soup.find("h1"):
        return soup.find("h1").get_text().strip()

    return None


# -------------------------------
# CLI Entry Point
# -------------------------------
if __name__ == "__main__":
    print("\n=== News Fact Checker ===")
    print("1. Check by headline & description")
    print("2. Check by URL")
    choice = input("Choose option (1/2): ").strip()

    if choice == "1":
        headline = input("\nEnter the news headline: ").strip()
        description = input("Enter the news description (optional): ").strip()
        result = fact_check_news(headline, description)
        print("\n‚úÖ Fact Check Result:\n", result)

    elif choice == "2":
        url = input("\nEnter news article URL: ").strip()
        headline = extract_headline_from_url(url)

        if not headline:
            print("‚ùå Could not extract headline.")
        else:
            print(f"\nüì∞ Extracted Headline: {headline}\n")
            result = fact_check_news(headline)
            print("‚úÖ Fact Check Result:\n", result)
    else:
        print("‚ùå Invalid option. Exiting.")